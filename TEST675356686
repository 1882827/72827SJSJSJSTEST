local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("Sad TESTTTTTT", {
    main_color = Color3.fromRGB(61, 10, 161),
    min_size = Vector2.new(685, 800),
    can_resize = false,
})

local tabAutomation = window:AddTab("Main")

tabAutomation:AddLabel("Settings").TextSize = 22

local walkSpeedValue = 16
tabAutomation:AddTextBox("Speed", function(text)
    local speed = tonumber(text)
    if speed and speed >= 1 and speed <= 500 then
        walkSpeedValue = speed
    end
end)

local setSpeed = false
tabAutomation:AddSwitch("Set", function(state)
    setSpeed = state
    task.spawn(function()
        while setSpeed do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = walkSpeedValue
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = 16
            end
        end
    end)
end)

local sizeValue = 1
tabAutomation:AddTextBox("Size", function(text)
    local size = tonumber(text)
    if size and size >= 1 and size <= 100 then
        sizeValue = size
    end
end)

local setSize = false
tabAutomation:AddSwitch("Set", function(state)
    setSize = state
    task.spawn(function()
        while setSize do
            local char = game.Players.LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    for _, scaleName in pairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
                        local scaleInstance = humanoid:FindFirstChild(scaleName)
                        if scaleInstance then
                            scaleInstance.Value = sizeValue
                        end
                    end
                end
            end
            task.wait(0.1)
        end
        local char = game.Players.LocalPlayer.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                for _, scaleName in pairs({"BodyDepthScale", "BodyHeightScale", "BodyWidthScale", "HeadScale"}) do
                    local scaleInstance = humanoid:FindFirstChild(scaleName)
                    if scaleInstance then
                        scaleInstance.Value = 1
                    end
                end
            end
        end
    end)
end)

tabAutomation:AddLabel("Misc").TextSize = 22

tabAutomation:AddSwitch("Show Pets", function(State)
    local petsEvent = game:GetService("ReplicatedStorage").rEvents.showPetsEvent
    if State then
        petsEvent:FireServer("showPets")
    else
        petsEvent:FireServer("hidePets")
    end
end)

do
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local ShowOthersPets = true

    local function SetPetsVisibility(player, visible)
        if player == LocalPlayer then return end
        local character = player.Character
        if not character then return end

        local petsFolder = character:FindFirstChild("Pets")
        if petsFolder then
            for _, pet in ipairs(petsFolder:GetChildren()) do
                pet.LocalTransparencyModifier = visible and 0 or 1
            end
        end
    end

    local function WatchPetsFolder(player)
        if player == LocalPlayer then return end
        local character = player.Character
        if not character then return end

        local petsFolder = character:FindFirstChild("Pets")
        if petsFolder then
            SetPetsVisibility(player, ShowOthersPets)
            petsFolder.ChildAdded:Connect(function(pet)
                pet.LocalTransparencyModifier = ShowOthersPets and 0 or 1
            end)
        end
    end

    local function WatchCharacter(player)
        player.CharacterAdded:Connect(function()
            task.wait(0.1)
            WatchPetsFolder(player)
        end)

        if player.Character then
            WatchPetsFolder(player)
        end
    end

    local function ApplyToAllPlayers()
        for _, player in ipairs(Players:GetPlayers()) do
            SetPetsVisibility(player, ShowOthersPets)
        end
    end

    Players.PlayerAdded:Connect(WatchCharacter)
    for _, player in ipairs(Players:GetPlayers()) do
        WatchCharacter(player)
    end

    tabAutomation:AddSwitch("Show Other Pets", function(State)
        ShowOthersPets = State
        ApplyToAllPlayers()
    end)
end

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)

local function createParts()
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            local newPartSide = Instance.new("Part")
            newPartSide.Size = Vector3.new(partSize, 1, partSize)
            newPartSide.Position = startPosition + Vector3.new(x * partSize, 0, z * partSize)
            newPartSide.Anchored = true
            newPartSide.Transparency = 1
            newPartSide.CanCollide = true
            newPartSide.Name = "Part_Side_" .. x .. "_" .. z
            newPartSide.Parent = workspace
            table.insert(parts, newPartSide)
            
            local newPartLeftRight = Instance.new("Part")
            newPartLeftRight.Size = Vector3.new(partSize, 1, partSize)
            newPartLeftRight.Position = startPosition + Vector3.new(-x * partSize, 0, z * partSize)
            newPartLeftRight.Anchored = true
            newPartLeftRight.Transparency = 1
            newPartLeftRight.CanCollide = true
            newPartLeftRight.Name = "Part_LeftRight_" .. x .. "_" .. z
            newPartLeftRight.Parent = workspace
            table.insert(parts, newPartLeftRight)
            
            local newPartUpLeft = Instance.new("Part")
            newPartUpLeft.Size = Vector3.new(partSize, 1, partSize)
            newPartUpLeft.Position = startPosition + Vector3.new(-x * partSize, 0, -z * partSize)
            newPartUpLeft.Anchored = true
            newPartUpLeft.Transparency = 1
            newPartUpLeft.CanCollide = true
            newPartUpLeft.Name = "Part_UpLeft_" .. x .. "_" .. z
            newPartUpLeft.Parent = workspace
            table.insert(parts, newPartUpLeft)
            
            local newPartUpRight = Instance.new("Part")
            newPartUpRight.Size = Vector3.new(partSize, 1, partSize)
            newPartUpRight.Position = startPosition + Vector3.new(x * partSize, 0, -z * partSize)
            newPartUpRight.Anchored = true
            newPartUpRight.Transparency = 1
            newPartUpRight.CanCollide = true
            newPartUpRight.Name = "Part_UpRight_" .. x .. "_" .. z
            newPartUpRight.Parent = workspace
            table.insert(parts, newPartUpRight)
        end
    end
end

local function makePartsWalkthrough()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = false
        end
    end
end

local function makePartsSolid()
    for _, part in ipairs(parts) do
        if part and part.Parent then
            part.CanCollide = true
        end
    end
end

tabAutomation:AddSwitch("Walk On Water", function(bool)
    if bool then
        createParts()
    else
        makePartsWalkthrough()
    end
end)

local antiAFKConnection

local function setupAntiAFK()
    local vu = game:GetService("VirtualUser")
    antiAFKConnection = game.Players.LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
end

setupAntiAFK()

local antiAFKEnabled = true
tabAutomation:AddSwitch("Anti AFK", function(bool)
    antiAFKEnabled = bool
    if bool then
        if not antiAFKConnection then
            setupAntiAFK()
        end
    else
        if antiAFKConnection then
            antiAFKConnection:Disconnect()
            antiAFKConnection = nil
        end
    end
end, true)

local infJumpEnabled = false
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
end)

local function toggleInfJump(state)
    infJumpEnabled = state
end

game:GetService("UserInputService").JumpRequest:Connect(function()
    if infJumpEnabled and humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

tabAutomation:AddSwitch("Inf Jump", function(state)
    toggleInfJump(state)
end)

local tabCal = window:AddTab("Calculator")
tabCal:AddLabel("Calculations").TextSize = 30

local function parseValue(s)
    if not s then return 0 end
    s = s:upper():gsub("%s", ""):gsub(",", "")
    local suffixes = {
        K = 1e3, M = 1e6, B = 1e9, T = 1e12,
        QA = 1e15, QN = 1e18, SX = 1e21,
        SP = 1e24, OC = 1e27
    }
    local numPart, suf = s:match("^([%-]?[%d%.]+)(%a*)$")
    if not numPart then return 0 end
    local n = tonumber(numPart) or 0
    if suf ~= "" and suffixes[suf] then
        return n * suffixes[suf]
    end
    return n
end

local function formatValue(n)
    local absn = math.abs(n)
    local sign = n < 0 and "-" or ""
    if absn >= 1e27 then
        return string.format("%s%.2fOc", sign, absn / 1e27)
    elseif absn >= 1e24 then
        return string.format("%s%.2fSp", sign, absn / 1e24)
    elseif absn >= 1e21 then
        return string.format("%s%.2fSx", sign, absn / 1e21)
    elseif absn >= 1e18 then
        return string.format("%s%.2fQn", sign, absn / 1e18)
    elseif absn >= 1e15 then
        return string.format("%s%.2fQa", sign, absn / 1e15)
    elseif absn >= 1e12 then
        return string.format("%s%.2fT", sign, absn / 1e12)
    elseif absn >= 1e9 then
        return string.format("%s%.2fB", sign, absn / 1e9)
    elseif absn >= 1e6 then
        return string.format("%s%.2fM", sign, absn / 1e6)
    elseif absn >= 1e3 then
        return string.format("%s%.2fK", sign, absn / 1e3)
    else
        return string.format("%s%.2f", sign, absn)
    end
end

local folderRebirth = tabCal:AddFolder("Rebirth Calculator")
local lblTitleRebirth = folderRebirth:AddLabel("Rebirth Calculator")
lblTitleRebirth.TextSize = 30

local selectedRebirths = 0
local strengthPerRep = 0
local repsPerSecond = 75
local eggMultiplier = 2
local useCurrentRebirth = false
local useEggs = false

local lblSelected   = folderRebirth:AddLabel("Selected Rebirths: -")
local lblStrength   = folderRebirth:AddLabel("Strength per Rep: -")
local lblHour       = folderRebirth:AddLabel("Strength gained in 1h: -")
local lblDay        = folderRebirth:AddLabel("Strength gained in 1d: -")
local lblWeek       = folderRebirth:AddLabel("Strength gained in 1w: -")

local function getCurrentRebirth()
    local player = game.Players.LocalPlayer
    if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rebirths") then
        return tonumber(player.leaderstats.Rebirths.Value) or 0
    end
    return 0
end

local function updateRebirthCalc()
    local rebirths = useCurrentRebirth and getCurrentRebirth() or selectedRebirths
    if useEggs then
        rebirths = rebirths * eggMultiplier
    end
    strengthPerRep = rebirths * 26.53 
    local strengthHour = strengthPerRep * repsPerSecond * 3600
    local strengthDay  = strengthHour * 24
    local strengthWeek = strengthDay * 7
    lblSelected.Text = string.format("Selected Rebirths: %s", formatValue(rebirths))
    lblStrength.Text = string.format("Strength per Rep: %s", formatValue(strengthPerRep))
    lblHour.Text     = string.format("Strength gained in 1h: %s", formatValue(strengthHour))
    lblDay.Text      = string.format("Strength gained in 1d: %s", formatValue(strengthDay))
    lblWeek.Text     = string.format("Strength gained in 1w: %s", formatValue(strengthWeek))
end

folderRebirth:AddTextBox("Rebirth Input", function(value)
    selectedRebirths = parseValue(value)
    if not useCurrentRebirth then updateRebirthCalc() end
end, { clear = false, text = tostring(selectedRebirths) })

folderRebirth:AddSwitch("Use Current Rebirth", function(state)
    useCurrentRebirth = state
    updateRebirthCalc()
end):Set(useCurrentRebirth)

folderRebirth:AddSwitch("Eggs", function(state)
    useEggs = state
    updateRebirthCalc()
end):Set(useEggs)

local player = game.Players.LocalPlayer
if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rebirths") then
    player.leaderstats.Rebirths.Changed:Connect(function()
        if useCurrentRebirth then updateRebirthCalc() end
    end)
end
updateRebirthCalc()

local folderDamage = tabCal:AddFolder("Damage Calculator")
local lblTitleDamage = folderDamage:AddLabel("Strength To Damage")
lblTitleDamage.TextSize = 30

local BASE_DAMAGE_FACTOR = 0.1
local PACK_FACTOR_PER_PACK = 0.0335
local PACKS_MAX = 8

local function parseValue(s)
    if not s then return 0 end
    s = s:upper():gsub("%s", ""):gsub(",", "")
    local suffixes = { B = 1e9, T = 1e12, QA = 1e15 }
    local numPart, suf = s:match("^([%-]?[%d%.]+)(%a*)$")
    if not numPart then return 0 end
    local n = tonumber(numPart) or 0
    if suf ~= "" and suffixes[suf] then
        return n * suffixes[suf]
    end
    return n
end

local function formatValue(n)
    local absn = math.abs(n)
    local sign = n < 0 and "-" or ""
    if absn >= 1e15 then
        return string.format("%s%.2fQa", sign, absn / 1e15)
    elseif absn >= 1e12 then
        return string.format("%s%.2fT", sign, absn / 1e12)
    elseif absn >= 1e9 then
        return string.format("%s%.2fB", sign, absn / 1e9)
    else
        return string.format("%s%.2f", sign, absn)
    end
end

local function getCurrentStrength()
    local player = game.Players.LocalPlayer
    if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Strength") then
        return tonumber(player.leaderstats.Strength.Value) or 0
    end
    return 0
end

local lblUsedStrength = folderDamage:AddLabel("Used Strength: -")
local lblBaseDamage   = folderDamage:AddLabel("Base Damage: -")
local lblFinalDamage  = folderDamage:AddLabel("Damage with X Packs: -")
local lblIncrease     = folderDamage:AddLabel("Damage Increase: -")

local strengthText = "7.08Qa"
local packsCount = 8
local useCurrentStrength = true
local useFullPacks = true

local function updateDisplay()
    local strength = useCurrentStrength and getCurrentStrength() or parseValue(strengthText)
    local packs = useFullPacks and PACKS_MAX or packsCount
    local baseDamage = strength * BASE_DAMAGE_FACTOR
    local finalDamage = strength * (BASE_DAMAGE_FACTOR + PACK_FACTOR_PER_PACK * packs)
    local increaseValue = finalDamage - baseDamage
    local increasePercent = baseDamage > 0 and ((finalDamage / baseDamage) - 1) * 100 or 0
    lblUsedStrength.Text = "Used Strength: " .. formatValue(strength)
    lblBaseDamage.Text   = "Base Damage: " .. formatValue(baseDamage)
    lblFinalDamage.Text = string.format("Damage with %d Packs: %s", packs, formatValue(finalDamage))
    lblFinalDamage.TextColor3 = Color3.fromRGB(255, 0, 0)
    lblIncrease.Text = string.format("Damage Increase: %s (+%.0f%%)", formatValue(increaseValue), increasePercent)
end

folderDamage:AddTextBox("Strength Input", function(value)
    strengthText = value
    if not useCurrentStrength then updateDisplay() end
end, { clear = false, text = strengthText })

folderDamage:AddTextBox("Packs Count (0-8)", function(value)
    local num = tonumber(value) or 0
    if num < 0 then num = 0 elseif num > PACKS_MAX then num = PACKS_MAX end
    packsCount = num
    if not useFullPacks then updateDisplay() end
end, { clear = false, text = tostring(packsCount) })

folderDamage:AddSwitch("Use Current Strength", function(state)
    useCurrentStrength = state
    updateDisplay()
end):Set(useCurrentStrength)

folderDamage:AddSwitch("Use Full Packs (8)", function(state)
    useFullPacks = state
    updateDisplay()
end):Set(useFullPacks)

local player = game.Players.LocalPlayer
if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Strength") then
    player.leaderstats.Strength.Changed:Connect(function()
        if useCurrentStrength then updateDisplay() end
    end)
end
updateDisplay()

local folderDur = tabCal:AddFolder("Hit Calculator")
local lblTitleHits = folderDur:AddLabel("Hit Calculations")
lblTitleHits.TextSize = 30

local ULTIMATE_BOOST_PERCENT = 75
local PETS_BOOST_PER_PACK = 33.125
local ATTACK_SPEED = 1.3

local function getCurrentDurability()
    local player = game.Players.LocalPlayer
    if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Durability") then
        return parseValue(player.leaderstats.Durability.Value)
    end
    return 0
end

local initialDurability = getCurrentDurability()
local durabilityText = formatValue(initialDurability)
local packsCountDur = PACKS_MAX
local useCurrentDurability = true
local useFullPacksDur = true
local incomingDamage = parseValue("2.6Qa")

local lblPlayerDur = folderDur:AddLabel("Player Durability: -")
local lblUltimate  = folderDur:AddLabel("Ultimate Boost: -")
local lblPets      = folderDur:AddLabel("Pets Boost: -")
local lblTotalHP   = folderDur:AddLabel("Total Health: -")
local lblHitsKill  = folderDur:AddLabel("Hits to Kill: -")
local lblTimeKill  = folderDur:AddLabel("Time to Kill: -")

local function updateDisplayDurability()
    local dur = useCurrentDurability and getCurrentDurability() or parseValue(durabilityText)
    local packs = useFullPacksDur and PACKS_MAX or packsCountDur
    local ultimateBoostValue = dur * (ULTIMATE_BOOST_PERCENT / 100)
    local petsBoostValue = dur * ((PETS_BOOST_PER_PACK * packs) / 100)
    local totalHealth = dur + ultimateBoostValue + petsBoostValue
    local hitsToKill = (incomingDamage > 0) and math.max(1, math.ceil(totalHealth / incomingDamage)) or 0
    local timeToKillSec = (ATTACK_SPEED > 0) and (hitsToKill / ATTACK_SPEED) or 0
    local minutes = math.floor(timeToKillSec / 60)
    local seconds = timeToKillSec - (minutes * 60)
    lblPlayerDur.Text = string.format("Player Durability: %s", formatValue(dur))
    lblUltimate.Text  = string.format("Ultimate Boost: %s (+%d%%)", formatValue(ultimateBoostValue), ULTIMATE_BOOST_PERCENT)
    lblPets.Text      = string.format("Pets Boost (%d): %s (+%.3f%%)", packs, formatValue(petsBoostValue), PETS_BOOST_PER_PACK * packs)
    lblTotalHP.Text   = string.format("Total Health: %s", formatValue(totalHealth))
    lblTotalHP.TextColor3 = Color3.fromRGB(0, 255, 255)
    lblHitsKill.Text  = string.format("Hits to Kill: %d", hitsToKill)
    lblTimeKill.Text  = string.format("Time to Kill: %dm %.1fs", minutes, seconds)
end

folderDur:AddTextBox("Durability Input", function(value)
    durabilityText = value
    updateDisplayDurability()
end, { clear = false, text = durabilityText })

folderDur:AddTextBox("Target Packs Count (0-8)", function(value)
    local num = tonumber(value) or 0
    if num < 0 then num = 0 elseif num > PACKS_MAX then num = PACKS_MAX end
    packsCountDur = num
    if not useFullPacksDur then updateDisplayDurability() end
end, { clear = false, text = tostring(packsCountDur) })

folderDur:AddTextBox("Incoming Damage (per hit)", function(value)
    incomingDamage = parseValue(value)
    updateDisplayDurability()
end, { clear = false, text = formatValue(incomingDamage) })

folderDur:AddSwitch("Use Current Durability", function(state)
    useCurrentDurability = state
    updateDisplayDurability()
end, { state = useCurrentDurability })

folderDur:AddSwitch("Use Full Packs", function(state)
    useFullPacksDur = state
    updateDisplayDurability()
end, { state = useFullPacksDur })

if player and player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Durability") then
    player.leaderstats.Durability.Changed:Connect(function()
        if useCurrentDurability then updateDisplayDurability() end
    end)
end
updateDisplayDurability()
